<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qudian.pay.ares.dao.mapper.local.BaseUserPagingMapper" >
  <resultMap id="BaseResultMap" type="com.qudian.pay.ares.dao.entity.local.BaseUserPaging" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="is_end" property="isEnd" jdbcType="TINYINT" />
    <result column="totals" property="totals" jdbcType="INTEGER" />
    <result column="previous" property="previous" jdbcType="VARCHAR" />
    <result column="is_start" property="isStart" jdbcType="VARCHAR" />
    <result column="next" property="next" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, is_end, totals, previous, is_start, next, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from base_user_paging
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from base_user_paging
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qudian.pay.ares.dao.entity.local.BaseUserPaging" >
    insert into base_user_paging (id, is_end, totals, 
      previous, is_start, next, 
      create_time)
    values (#{id,jdbcType=INTEGER}, #{isEnd,jdbcType=TINYINT}, #{totals,jdbcType=INTEGER}, 
      #{previous,jdbcType=VARCHAR}, #{isStart,jdbcType=VARCHAR}, #{next,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.qudian.pay.ares.dao.entity.local.BaseUserPaging" >
    insert into base_user_paging
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="isEnd != null" >
        is_end,
      </if>
      <if test="totals != null" >
        totals,
      </if>
      <if test="previous != null" >
        previous,
      </if>
      <if test="isStart != null" >
        is_start,
      </if>
      <if test="next != null" >
        next,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="isEnd != null" >
        #{isEnd,jdbcType=TINYINT},
      </if>
      <if test="totals != null" >
        #{totals,jdbcType=INTEGER},
      </if>
      <if test="previous != null" >
        #{previous,jdbcType=VARCHAR},
      </if>
      <if test="isStart != null" >
        #{isStart,jdbcType=VARCHAR},
      </if>
      <if test="next != null" >
        #{next,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qudian.pay.ares.dao.entity.local.BaseUserPaging" >
    update base_user_paging
    <set >
      <if test="isEnd != null" >
        is_end = #{isEnd,jdbcType=TINYINT},
      </if>
      <if test="totals != null" >
        totals = #{totals,jdbcType=INTEGER},
      </if>
      <if test="previous != null" >
        previous = #{previous,jdbcType=VARCHAR},
      </if>
      <if test="isStart != null" >
        is_start = #{isStart,jdbcType=VARCHAR},
      </if>
      <if test="next != null" >
        next = #{next,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qudian.pay.ares.dao.entity.local.BaseUserPaging" >
    update base_user_paging
    set is_end = #{isEnd,jdbcType=TINYINT},
      totals = #{totals,jdbcType=INTEGER},
      previous = #{previous,jdbcType=VARCHAR},
      is_start = #{isStart,jdbcType=VARCHAR},
      next = #{next,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>